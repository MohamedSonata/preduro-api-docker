# path: ./docker-compose.yml
version: '3.8'

services:
  strapi:
    build: .
    image: mosonata/strapi-api:buildx
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_HOST: strapiDB
      DATABASE_PORT: 5432
      DATABASE_NAME: postgres
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      JWT_SECRET: EKTlwUaxZtI0ufLT/5KbQA==
      API_TOKEN_SALT: 1IOJI4mJRnMqrSyyLkQCmg==
      ADMIN_JWT_SECRET: z0GurZ7dKAxmfY7OUEiXPA==
      APP_KEYS: ntgWjxfIwfaj5gp818L6GA==,wPOtAPxzZuNg2rK+3NzefA==,KgjV6hn1nLIrKNKNIXeSOg==,XUyhVuASEjBfWy6p0UxPnA==
      NODE_ENV: production
    deploy:
      replicas: 6
      update_config:
        parallelism: 2
        delay: 120s
      restart_policy:
        condition: any
    secrets:
      - db_password

    volumes:
      - ./config:/opt/app/config
      - ./src:/opt/app/src
      - ./package.json:/opt/package.json
      - ./yarn.lock:/opt/yarn.lock
      - ./public/uploads:/opt/app/public/uploads
    ports:
      - '1337:1337'
    depends_on:
      - strapiDB

  strapiDB:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
      POSTGRES_DB: postgres
    volumes:
      - strapi-data:/var/lib/postgresql/data/
    ports:
      - '5432:5432'

volumes:
  strapi-data:
secrets:
  db_password:
    file: ./db_password.txt    
# version: '3'
# services:
#   strapi:
#     # platform: linux/amd64
#     # container_name: strapi
#     build: .
#     image: mosonata/strapi-api:buildx

#     # restart: unless-stopped
#    # env_file: .env

#     environment:
#       DATABASE_CLIENT: ${DATABASE_CLIENT}
#       DATABASE_HOST: strapiDB
#       DATABASE_PORT: ${DATABASE_PORT}
#       DATABASE_NAME: ${DATABASE_NAME}
#       DATABASE_USERNAME: ${DATABASE_USERNAME}
#       DATABASE_PASSWORD: ${DATABASE_PASSWORD}
#       JWT_SECRET: ${JWT_SECRET}
#       ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
#       APP_KEYS: ${APP_KEYS}
#       NODE_ENV: ${NODE_ENV}
#       DATABASE_CLIENT: postgres
#     #  DATABASE_CLIENT: postgres
#      # DATABASE_HOST: strapiDB
#      # DATABASE_PORT: 5432
#      # DATABASE_NAME: postgres
#      # DATABASE_USERNAME: postgres
#      # DATABASE_PASSWORD: postgrespw
#      # JWT_SECRET: EKTlwUaxZtI0ufLT/5KbQA==
#      # ADMIN_JWT_SECRET: z0GurZ7dKAxmfY7OUEiXPA==
#      # APP_KEYS: ntgWjxfIwfaj5gp818L6GA==,wPOtAPxzZuNg2rK+3NzefA==
#      # NODE_ENV: production
#     deploy:
#       replicas: 6
#       update_config:
#         parallelism: 2
#         delay: 120s
#       restart_policy:
#         condition: any
#     secrets:
#       - strapi_env
#     command: sh -c "docker-entrypoint.sh"
#     volumes:
#       - ./config:/opt/app/config
#       - ./src:/opt/app/src
#       - ./package.json:/opt/package.json
#       - ./yarn.lock:/opt/yarn.lock
#       - ./.env:/opt/app/.env
#       - ./public/uploads:/opt/app/public/uploads
#     ports:
#       - '1337:1337'
#     # networks:
#     #   - express-app_my-overlay
#     depends_on:
#       - strapiDB

#   strapiDB:
#     # container_name: strapiDB
#     # platform: linux/amd64 #for platform error on Apple M1 chips
#     restart: unless-stopped
#   #  env_file: .env
#     image: postgres
#     environment:
#       POSTGRES_USER: ${DATABASE_USERNAME}
#       POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
#       POSTGRES_DB: ${DATABASE_NAME}
     
#     volumes:
#       - strapi-data:/var/lib/postgresql/data/ #using a volume
#       #- ./data:/var/lib/postgresql/data/ # if you want to use a bind folder

#     ports:
#       - '5432:5432'
#     # networks:
#     #   - express-app_my-overlay

# volumes:
#   strapi-data:
# secrets:
#   strapi_env:
#     file: ./strapi_env.txt    
# # networks:
# #   strapi:
# #     # name: Strapi
#     driver: bridge
